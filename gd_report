#!/usr/bin/env python3

'''
Reporting functions.

'''
from sys import path
path.append("../../")

import package.modules.gd_helpers as h

def print_banner():
    ''' Prints banner.
    '''
    print(f"{h.GREEN}{'*'*72}{h.RESET}\n"
          f"{h.GREEN}*{h.RESET}{'RAID Repair Automation Tool'.center(70)}"
          f"{h.GREEN}*{h.RESET}\n"
          f"{h.GREEN}*{h.RESET}{('Version '+'2.1').center(70)}{h.GREEN}"
          f"{h.GREEN}*{h.RESET}\n"
          f"{h.GREEN}{'*'*72}{h.RESET}\n")

def print_model_info():
    ''' Prints the SU width and number of sectors for DD model.
    '''
    if h.DD3300:
        print(f"{h.BLUE}DD3300/DP4400: Valid Stripe Unit Widths (-u) is 512 "
              f"and sectors (-a) is 20{h.RESET}")
    elif h.DDVE:
        print(f"{h.BLUE}DDVE: Valid Stripe Unit Widths (-u) is 256 and sectors"
              f" (-a) is 38{h.RESET}")
    else:
        print(f"This is a {h.MODEL}.")
        print(f"Non DDVE models are not supported yet.")
        h.logging.info(f"Execution stopped as {h.MODEL} detected.")
        h.logging.info(f"QUIT")
        quit()

def print_line():
    ''' Print a blank line.
    '''
    print("")

def print_completed_stripes():
    ''' Print a list of unique completed stripes.
    '''
    completed_list = h.get_completed_list()
    if len(completed_list) > 0:
        print(f"{h.GREEN}Completed Stripes:{h.RESET}")
        print(f"{h.GREEN}{'-'*17}{h.RESET}")
        for s in completed_list:
            print(f"{h.GREEN}Stripe {s.stripe} completed the fix "
                  f"{s.datetime.strftime('%Y %b %d %H:%M:%S')}.{h.RESET}")
        print_line()

def print_zero_count():
    ''' For DDVE, print the number of occurrances of [stripe = 0].
    '''
    print(f"{h.GREEN}There were {h.DDVE_STRIPE_ZERO_COUNT} occurrances of "
          f"[stripe = 0] that were ignored.{h.RESET}")
    print_line()

def ddve_raidtool_commands(resync):
    ''' Prints the commands to run the dd_raidtool commands
        specific to DDVE based systems.
        If "resync" parameter is set then the write commands are also 
        printed for zeroing out the stripe.
    '''
    print(f"{h.GREEN}dd_raidtool commands:{h.RESET}")
    print(f"{h.GREEN}{'-' * 22} {h.RESET}")
    unique_stripe_list = h.unique_stripe_list()
    for s in unique_stripe_list:
        print(f"{h.GREEN}{s.datetime.strftime('%Y %b %d %H:%M:%S')} stripe "
              f"{s.stripe} check:{h.BLUE} dd_raidtool --op rvall --offset="
              f"{h.get_base_offset(s.offset)} --req=4718592 --total=4718592 "
              f"/dev/{s.dg}_{s.ppart}_p0c_ex{h.RESET}")
    if resync:
        print_line()
        print(f"{h.GREEN}dd_raidtool zero out stripe commands:{h.RESET}")
        print(f"{h.GREEN}{'-'*37}{h.RESET}")
        print(f"{h.YELLOW}WARNING: Remember to dump the stripe before "
              f"zeroing the stripe{h.RESET}")
        for s in unique_stripe_list:
            print(f"{h.GREEN}{s.datetime.strftime('%Y %b %d %H:%M:%S')} stripe "
                  f"{s.stripe} dump:{h.RED} ./stripe_dump_ddve.pl "
                  f"{s.stripe} {s.dm}{h.RESET}")
        print(f"{h.YELLOW}WARNING: Only run --op zw commands if you are "
              f"sure you want to zero the stripe.{h.RESET}")
        for s in unique_stripe_list:
            print(f"{h.GREEN}{s.datetime.strftime('%Y %b %d %H:%M:%S')} stripe "
                  f"{s.stripe} zero:{h.RED} dd_raidtool --op zw --offset="
                  f"{h.get_base_offset(s.offset)} --req=4718592 --total=4718592 "
                  f"/dev/{s.dg}_{s.ppart}_p0c_ex{h.RESET}")
    print_line()

def ddve_raid_rescue_commands(resync=False):
    ''' Prints the commands to run the dd_raid_rescue commands
        specific to DDVE based systems.
        If "resync" parameter is set then the resync commands are also 
        printed for resyncing the stripe with dd_raid_rescue.
    '''
    h.match_array_id()
    print(f"{h.GREEN}RAID rescue commands:{h.RESET}")
    print(f"{h.GREEN}{'-'*21}")    
    print(f"{h.YELLOW}sdm and ddm are based on latest Autosupport date: "
          f"{h.RED}{h.MOST_RECENT_ASUP.strftime('%Y %b %d %H:%M:%S')}{h.RESET}")
    print(f"{h.YELLOW}If there was a reboot after this time check dm_numbers or "
          f"run tool on more recent SUB.{h.RESET}")
    unique_stripe_list = h.unique_stripe_list()
    for s in unique_stripe_list:
        out = f"{h.GREEN}{s.datetime.strftime('%Y %b %d %H:%M:%S')} stripe {s.stripe} : {h.BLUE}"
        if h.DD3300:
            out += f"./dd_raid_rescue -u512 -f{s.stripe} -n1 -p5 -a20 --array_id={s.array_id} -e1 -s{s.dm}"
            out += f" --ddve{h.RESET}"
        else:
            out += f"./dd_raid_rescue -u256 -f{s.stripe} -n1 -p5 -a38 --array_id={s.array_id} -e1 -s{s.dm}"
            out += f" --ddve{h.RESET}"
        print(out)
    if resync:
        print_line()
        print(f"{h.GREEN}RAID rescue resync commands:{h.RESET}")
        print(f"{h.GREEN}{'-'*28}{h.RESET}")
        print(f"{h.YELLOW}WARNING: Only run resync commands if you are sure "
              f"you want to resync the stripe. {h.RESET}")
        for s in unique_stripe_list:
            out = f"{h.GREEN}{s.datetime.strftime('%Y %b %d %H:%M:%S')} stripe {s.stripe} : {h.RED}"
            if h.DD3300:
                out += f"./dd_raid_rescue -u512 -f{s.stripe} -n1 -p5 -a20 --array_id={s.array_id} -e1 -s{s.dm}"
                out += f" -d{s.dm} --ddve --repair --resync{h.RESET}"
            else:
                out += f"./dd_raid_rescue -u256 -f{s.stripe} -n1 -p5 -a38 --array_id={s.array_id} -e1 -s{s.dm}"
                out += f" -d{s.dm} --ddve --repair --resync{h.RESET}"
            print(out)
    print_line()

def print_inflight_stripe_report():
    ''' Prints a report for each unique inflight stripe found.
        Only the most recent occurance of the stripe is
        printed.
        Does not include stripes that completed the fix.
    '''
    print(f"{h.YELLOW}{'*'*30}{h.RESET}")
    print(f"{h.YELLOW}*   Inflight Stripe Report   *{h.RESET}")
    print(f"{h.YELLOW}{'*'*30}{h.RESET}")
    unique_stripe_list = h.unique_stripe_list()
    if len(unique_stripe_list) == 1:
        print(f"{h.GREEN}There is {len(unique_stripe_list)} stripe showing inflight that "
              f"needs to be fixed.{h.RESET}")
    else:
        print(f"{h.GREEN}There are {len(unique_stripe_list)} stripes showing inflight that "
              f"need to be fixed.{h.RESET}")
    for s in unique_stripe_list:
        print(f"{h.YELLOW}{'*'*50}{h.RESET}")
        print(f"{h.GREEN}[*] Stripe {s.stripe} shows as an inflight stripe on "
              f"{s.datetime.strftime('%Y %b %d %H:%M:%S')}.{h.RESET}")
        print(f"{h.GREEN}[*] Good Headers: {s.good}{h.RESET}")
        print(f"{h.GREEN}[*] Bad Headers: {s.bad}{h.RESET}")
        print(f"{h.GREEN}[*] Missing Headers: {s.missing}{h.RESET}")
        print(f"{h.GREEN}[*] Disk: {s.dm}{h.RESET}")
        print(f"{h.GREEN}[*] dg: {s.dg}{h.RESET}")
        print(f"{h.GREEN}[*] ppart: {s.ppart}{h.RESET}")
        print(f"{h.GREEN}[*] Offset: {s.offset} | Base offset: "
              f"{h.get_base_offset(s.offset)}{h.RESET}")
        print(f"{h.GREEN}[*] SU Error List: {s.errors_to_string()}")
        for err in s.unique_error_codes():
            if err != h.NO_ERR:
                print(f"{h.GREEN}[*] Error code: {err} {h.STRIPE_UNIT_ERRORS[err][0]} "
                      f"({h.STRIPE_UNIT_ERRORS[err][1]}{h.RESET})")
    print(f"{h.YELLOW}{'*'*30}{h.RESET}")
    print_line()

def print_ddfs_verify():
    ''' Prints the information needed for DDFSY team to proceed 
        with DC recovery.
    '''
    print(f"{h.GREEN}DDFS pool verify report{h.RESET}")
    print(f"{h.GREEN}{'-'*23}{h.RESET}")
    unique_stripe_list = h.unique_stripe_list()
    for s in unique_stripe_list:
        print(f"{h.BLUE}Stripe = {s.stripe} offset = {h.get_base_offset(s.offset)}"
              f" {s.dg}/{s.ppart}{h.RESET}")

if __name__ == "__main__":
    print("This is the reporting module.")
