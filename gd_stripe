#!/usr/bin/env python3

'''
Stripe class

'''

from datetime import datetime

class Stripe:
    
    def __init__(self, datetime, stripe, good, bad, missing, op, tp, req, errors, completed):
        self.__datetime = datetime
        self.__stripe = stripe
        self.__good = good
        self.__bad = bad
        self.__missing = missing
        self.__op = op
        self.__type = tp
        self.__request = req
        self.__errors = errors
        self.__completed = completed

    @property
    def datetime(self):
        return self.__datetime
    
    @property
    def stripe(self):
        return self.__stripe
        
    @property
    def good(self):
        return self.__good
        
    @property
    def bad(self):
        return self.__bad
        
    @property
    def missing(self):
        return self.__missing
        
    @property
    def op(self):
        return self.__op
        
    @property
    def tp(self):
        return self.__type
        
    @property
    def req(self):
        return self.__request
        
    @property
    def errors(self):
        return self.__errors

    @property
    def completed(self):
        return self.__completed

class Stripe_ddr(Stripe):
    
    def __init__(self, datetime, stripe, good, bad, missing, op, tp, req, errors, dg, completed):
        super().__init__(datetime, stripe, good, bad, missing, op, tp, req, errors, completed)
        self.__disk_group = dg
    
    def __str__(self):
        return f"{self.datetime.strftime('%c')} : {self.stripe} {self.req} {self.dg}"

    @property
    def dg(self):
        return self.__disk_group

class Stripe_ddve(Stripe):
    
    def __init__(self, datetime, stripe, good, bad, missing, op, tp, req, errors, dm, offset, dg, ppart, completed):
        super().__init__(datetime, stripe, good, bad, missing, op, tp, req, errors, completed)
        self.__dm = dm
        self.__offset = offset
        self.__disk_group = dg
        self.__ppart = ppart
        self.__a_id = 0
    
    def __str__(self):
        return f"{self.datetime.strftime('%c')} : {self.stripe} {self.req} {self.dm} {self.offset}"
    
    @property
    def dm(self):
        return self.__dm
    
    @property
    def offset(self):
        return self.__offset

    @property
    def dg(self):
        return self.__disk_group

    @property
    def ppart(self):
        return self.__ppart

    @property
    def array_id(self):
        return self.__a_id
    
    def add_array_id(self, a_id):
        self.__a_id = a_id

    def errors_to_string(self):
        index = 0
        out = ""
        for err in self.errors:
            if err != 'no_err':
                out += f"SUI: {index} [{err}], "
                index += 1
        return out[:-2]

    def unique_error_codes(self):
        return set(self.errors)

if __name__ == "__main__":
    print("This is the Stripe class.")
    test_stripe = Stripe_ddve(datetime.today(), "12345", "30", "2", "0", "1", 
                            "4", "deadbeef", ["40"], "dm-1", "47000", "dg1", "ppart1", False)
    print(test_stripe)
    print(test_stripe.errors_to_string())
